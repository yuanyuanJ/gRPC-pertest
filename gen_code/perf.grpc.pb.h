// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: perf.proto
#ifndef GRPC_perf_2eproto__INCLUDED
#define GRPC_perf_2eproto__INCLUDED

#include "perf.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace proto {

class PerfTest final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.PerfTest";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Unary(::grpc::ClientContext* context, const ::proto::Message& request, ::proto::Message* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Message>> AsyncUnary(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Message>>(AsyncUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Message>> PrepareAsyncUnary(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::Message>>(PrepareAsyncUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::proto::Message>> ClientStreaming(::grpc::ClientContext* context, ::proto::Message* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::proto::Message>>(ClientStreamingRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::proto::Message>> AsyncClientStreaming(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::proto::Message>>(AsyncClientStreamingRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::proto::Message>> PrepareAsyncClientStreaming(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::proto::Message>>(PrepareAsyncClientStreamingRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Message>> ServerStreaming(::grpc::ClientContext* context, const ::proto::Message& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::Message>>(ServerStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Message>> AsyncServerStreaming(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Message>>(AsyncServerStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Message>> PrepareAsyncServerStreaming(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::Message>>(PrepareAsyncServerStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::Message, ::proto::Message>> BidStreaming(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::Message, ::proto::Message>>(BidStreamingRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::Message, ::proto::Message>> AsyncBidStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::Message, ::proto::Message>>(AsyncBidStreamingRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::Message, ::proto::Message>> PrepareAsyncBidStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::Message, ::proto::Message>>(PrepareAsyncBidStreamingRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Unary(::grpc::ClientContext* context, const ::proto::Message* request, ::proto::Message* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unary(::grpc::ClientContext* context, const ::proto::Message* request, ::proto::Message* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ClientStreaming(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::ClientWriteReactor< ::proto::Message>* reactor) = 0;
      virtual void ServerStreaming(::grpc::ClientContext* context, const ::proto::Message* request, ::grpc::ClientReadReactor< ::proto::Message>* reactor) = 0;
      virtual void BidStreaming(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::Message,::proto::Message>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Message>* AsyncUnaryRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::Message>* PrepareAsyncUnaryRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::proto::Message>* ClientStreamingRaw(::grpc::ClientContext* context, ::proto::Message* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::proto::Message>* AsyncClientStreamingRaw(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::proto::Message>* PrepareAsyncClientStreamingRaw(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::Message>* ServerStreamingRaw(::grpc::ClientContext* context, const ::proto::Message& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Message>* AsyncServerStreamingRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::Message>* PrepareAsyncServerStreamingRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::Message, ::proto::Message>* BidStreamingRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::Message, ::proto::Message>* AsyncBidStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::Message, ::proto::Message>* PrepareAsyncBidStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Unary(::grpc::ClientContext* context, const ::proto::Message& request, ::proto::Message* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Message>> AsyncUnary(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Message>>(AsyncUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Message>> PrepareAsyncUnary(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::Message>>(PrepareAsyncUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::proto::Message>> ClientStreaming(::grpc::ClientContext* context, ::proto::Message* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::proto::Message>>(ClientStreamingRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::proto::Message>> AsyncClientStreaming(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::proto::Message>>(AsyncClientStreamingRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::proto::Message>> PrepareAsyncClientStreaming(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::proto::Message>>(PrepareAsyncClientStreamingRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::Message>> ServerStreaming(::grpc::ClientContext* context, const ::proto::Message& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::Message>>(ServerStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Message>> AsyncServerStreaming(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Message>>(AsyncServerStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Message>> PrepareAsyncServerStreaming(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::Message>>(PrepareAsyncServerStreamingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::Message, ::proto::Message>> BidStreaming(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::Message, ::proto::Message>>(BidStreamingRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::Message, ::proto::Message>> AsyncBidStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::Message, ::proto::Message>>(AsyncBidStreamingRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::Message, ::proto::Message>> PrepareAsyncBidStreaming(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::Message, ::proto::Message>>(PrepareAsyncBidStreamingRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Unary(::grpc::ClientContext* context, const ::proto::Message* request, ::proto::Message* response, std::function<void(::grpc::Status)>) override;
      void Unary(::grpc::ClientContext* context, const ::proto::Message* request, ::proto::Message* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClientStreaming(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::ClientWriteReactor< ::proto::Message>* reactor) override;
      void ServerStreaming(::grpc::ClientContext* context, const ::proto::Message* request, ::grpc::ClientReadReactor< ::proto::Message>* reactor) override;
      void BidStreaming(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::Message,::proto::Message>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::Message>* AsyncUnaryRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::Message>* PrepareAsyncUnaryRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::proto::Message>* ClientStreamingRaw(::grpc::ClientContext* context, ::proto::Message* response) override;
    ::grpc::ClientAsyncWriter< ::proto::Message>* AsyncClientStreamingRaw(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::proto::Message>* PrepareAsyncClientStreamingRaw(::grpc::ClientContext* context, ::proto::Message* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::Message>* ServerStreamingRaw(::grpc::ClientContext* context, const ::proto::Message& request) override;
    ::grpc::ClientAsyncReader< ::proto::Message>* AsyncServerStreamingRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::Message>* PrepareAsyncServerStreamingRaw(::grpc::ClientContext* context, const ::proto::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::Message, ::proto::Message>* BidStreamingRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::Message, ::proto::Message>* AsyncBidStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::Message, ::proto::Message>* PrepareAsyncBidStreamingRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Unary_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_BidStreaming_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Unary(::grpc::ServerContext* context, const ::proto::Message* request, ::proto::Message* response);
    virtual ::grpc::Status ClientStreaming(::grpc::ServerContext* context, ::grpc::ServerReader< ::proto::Message>* reader, ::proto::Message* response);
    virtual ::grpc::Status ServerStreaming(::grpc::ServerContext* context, const ::proto::Message* request, ::grpc::ServerWriter< ::proto::Message>* writer);
    virtual ::grpc::Status BidStreaming(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::Message, ::proto::Message>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Unary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unary() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Unary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unary(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnary(::grpc::ServerContext* context, ::proto::Message* request, ::grpc::ServerAsyncResponseWriter< ::proto::Message>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientStreaming() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::proto::Message>* /*reader*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::proto::Message, ::proto::Message>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerStreaming() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreaming(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::grpc::ServerWriter< ::proto::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreaming(::grpc::ServerContext* context, ::proto::Message* request, ::grpc::ServerAsyncWriter< ::proto::Message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BidStreaming() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BidStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::Message, ::proto::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::Message, ::proto::Message>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Unary<WithAsyncMethod_ClientStreaming<WithAsyncMethod_ServerStreaming<WithAsyncMethod_BidStreaming<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Unary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Unary() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::Message, ::proto::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Message* request, ::proto::Message* response) { return this->Unary(context, request, response); }));}
    void SetMessageAllocatorFor_Unary(
        ::grpc::MessageAllocator< ::proto::Message, ::proto::Message>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::Message, ::proto::Message>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Unary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unary(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unary(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Message* /*request*/, ::proto::Message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientStreaming() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::proto::Message, ::proto::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, ::proto::Message* response) { return this->ClientStreaming(context, response); }));
    }
    ~WithCallbackMethod_ClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::proto::Message>* /*reader*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::proto::Message>* ClientStreaming(
      ::grpc::CallbackServerContext* /*context*/, ::proto::Message* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerStreaming() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::proto::Message, ::proto::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::Message* request) { return this->ServerStreaming(context, request); }));
    }
    ~WithCallbackMethod_ServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreaming(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::grpc::ServerWriter< ::proto::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::proto::Message>* ServerStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::Message* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BidStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BidStreaming() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::proto::Message, ::proto::Message>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidStreaming(context); }));
    }
    ~WithCallbackMethod_BidStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::Message, ::proto::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::proto::Message, ::proto::Message>* BidStreaming(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Unary<WithCallbackMethod_ClientStreaming<WithCallbackMethod_ServerStreaming<WithCallbackMethod_BidStreaming<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Unary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unary() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Unary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unary(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientStreaming() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::proto::Message>* /*reader*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerStreaming() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreaming(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::grpc::ServerWriter< ::proto::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BidStreaming() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BidStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::Message, ::proto::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unary() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Unary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unary(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientStreaming() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::proto::Message>* /*reader*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerStreaming() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreaming(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::grpc::ServerWriter< ::proto::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BidStreaming() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BidStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::Message, ::proto::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidStreaming(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Unary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Unary() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unary(context, request, response); }));
    }
    ~WithRawCallbackMethod_Unary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unary(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientStreaming() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ClientStreaming(context, response); }));
    }
    ~WithRawCallbackMethod_ClientStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::proto::Message>* /*reader*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ClientStreaming(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerStreaming() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ServerStreaming(context, request); }));
    }
    ~WithRawCallbackMethod_ServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreaming(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::grpc::ServerWriter< ::proto::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ServerStreaming(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BidStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BidStreaming() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidStreaming(context); }));
    }
    ~WithRawCallbackMethod_BidStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidStreaming(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::Message, ::proto::Message>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidStreaming(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unary() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::Message, ::proto::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::Message, ::proto::Message>* streamer) {
                       return this->StreamedUnary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unary(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::proto::Message* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::Message,::proto::Message>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Unary<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ServerStreaming() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::Message, ::proto::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::proto::Message, ::proto::Message>* streamer) {
                       return this->StreamedServerStreaming(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ServerStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreaming(::grpc::ServerContext* /*context*/, const ::proto::Message* /*request*/, ::grpc::ServerWriter< ::proto::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::Message,::proto::Message>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ServerStreaming<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Unary<WithSplitStreamingMethod_ServerStreaming<Service > > StreamedService;
};

}  // namespace proto


#endif  // GRPC_perf_2eproto__INCLUDED
